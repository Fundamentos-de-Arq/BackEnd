// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GrupoWebBackend.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("PublicationServiceTests")]
    public partial class PublicationServiceTestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "PublicationServiceTests.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "PublicationServiceTests", "As a Developer\r\nI wan to add a new Publication through API\r\nSo that it is availab" +
                    "le when wanting to see my publications.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
    #line hidden
#line 6
        testRunner.Given("the endpoint https://localhost:5001/api/v1/publications is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Type",
                        "UserNick",
                        "Ruc",
                        "Dni",
                        "Phone",
                        "Email",
                        "Name",
                        "LastName",
                        "Pass"});
            table17.AddRow(new string[] {
                        "1",
                        "VET",
                        "Frank",
                        "A12345",
                        "70258688",
                        "946401234",
                        "frank@outlook.com",
                        "Francisco",
                        "Voularte",
                        "123456"});
#line 7
        testRunner.And("A User is already stored for Publication", ((string)(null)), table17, "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Type",
                        "UserNick",
                        "Ruc",
                        "Dni",
                        "Phone",
                        "Email",
                        "Name",
                        "LastName",
                        "Pass"});
            table18.AddRow(new string[] {
                        "2",
                        "VET",
                        "Frank2",
                        "A12345",
                        "70258688",
                        "946401234",
                        "frank1@outlook.com",
                        "Francisco",
                        "Voularte",
                        "123456"});
#line 10
        testRunner.And("A User is already stored for Publication", ((string)(null)), table18, "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Type",
                        "UserNick",
                        "Ruc",
                        "Dni",
                        "Phone",
                        "Email",
                        "Name",
                        "LastName",
                        "Pass"});
            table19.AddRow(new string[] {
                        "3",
                        "VET",
                        "Frank3",
                        "A12345",
                        "70258688",
                        "946401234",
                        "frank2@outlook.com",
                        "Francisco",
                        "Voularte",
                        "123456"});
#line 13
        testRunner.And("A User is already stored for Publication", ((string)(null)), table19, "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Type",
                        "UserNick",
                        "Ruc",
                        "Dni",
                        "Phone",
                        "Email",
                        "Name",
                        "LastName",
                        "Pass"});
            table20.AddRow(new string[] {
                        "4",
                        "VET",
                        "Frank4",
                        "A12345",
                        "70258688",
                        "946401234",
                        "frank3@outlook.com",
                        "Francisco",
                        "Voularte",
                        "123456"});
#line 16
        testRunner.And("A User is already stored for Publication", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserId",
                        "Type",
                        "Description",
                        "DateTime"});
            table21.AddRow(new string[] {
                        "2",
                        "Acoso",
                        "Testing",
                        "14/09/2022 11:35"});
#line 19
        testRunner.And("a Report is already stored for Publication", ((string)(null)), table21, "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserId",
                        "NumPosts",
                        "Expired",
                        "StartDate",
                        "EndDate"});
            table22.AddRow(new string[] {
                        "1",
                        "5",
                        "0",
                        "14-09-2022",
                        "25-09-2022"});
#line 22
        testRunner.And("a Subscription is already stored for Publication", ((string)(null)), table22, "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Type",
                        "Name",
                        "Attention",
                        "Race",
                        "Age",
                        "isAdopted",
                        "UserId",
                        "PublicationId"});
            table23.AddRow(new string[] {
                        "101",
                        "Cat",
                        "Lolo",
                        "Required",
                        "Catitus",
                        "2",
                        "false",
                        "1",
                        "1"});
#line 25
        testRunner.And("a Pet is already stored for Publication", ((string)(null)), table23, "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Type",
                        "Name",
                        "Attention",
                        "Race",
                        "Age",
                        "isAdopted",
                        "UserId",
                        "PublicationId"});
            table24.AddRow(new string[] {
                        "102",
                        "Dog",
                        "Lolo",
                        "Required",
                        "Catitus",
                        "2",
                        "false",
                        "1",
                        "1"});
#line 28
        testRunner.And("a Pet is already stored for Publication", ((string)(null)), table24, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post a publication")]
        [NUnit.Framework.CategoryAttribute("publication-adding")]
        public void PostAPublication()
        {
            string[] tagsOfScenario = new string[] {
                    "publication-adding"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post a publication", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "PetId",
                            "UserId",
                            "DateTime",
                            "Comment"});
                table25.AddRow(new string[] {
                            "101",
                            "1",
                            "29/09/2021 16:20",
                            "This is a test comment"});
#line 34
        testRunner.When("A publication is sent", ((string)(null)), table25, "When ");
#line hidden
#line 37
        testRunner.Then("a response with status 200 is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post a publication of the same pet")]
        public void PostAPublicationOfTheSamePet()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post a publication of the same pet", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "PetId",
                            "UserId",
                            "DateTime",
                            "Comment"});
                table26.AddRow(new string[] {
                            "101",
                            "1",
                            "29/09/2021 16:20",
                            "This is a test comment"});
#line 39
        testRunner.When("A publication is sent", ((string)(null)), table26, "When ");
#line hidden
#line 42
        testRunner.Then("a response with status 400 is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post a publication from reported user")]
        public void PostAPublicationFromReportedUser()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post a publication from reported user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "PetId",
                            "UserId",
                            "DateTime",
                            "Comment"});
                table27.AddRow(new string[] {
                            "102",
                            "2",
                            "29/09/2021 16:20",
                            "This is a test comment"});
#line 44
        testRunner.When("A publication is sent", ((string)(null)), table27, "When ");
#line hidden
#line 47
        testRunner.Then("a response with Message \"This user has at least one report.\" and status 400 is re" +
                        "ceived", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post a publication from not subscribed user")]
        public void PostAPublicationFromNotSubscribedUser()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post a publication from not subscribed user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "PetId",
                            "UserId",
                            "DateTime",
                            "Comment"});
                table28.AddRow(new string[] {
                            "102",
                            "3",
                            "29/09/2021 16:20",
                            "This is a test comment"});
#line 49
        testRunner.When("A publication is sent", ((string)(null)), table28, "When ");
#line hidden
#line 52
        testRunner.Then("a response with Message \"This user not have a subscription.\" and status 400 is re" +
                        "ceived", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
